// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// splitHeaderLines
List splitHeaderLines(std::vector<std::string> lines);
RcppExport SEXP _lasr_splitHeaderLines(SEXP linesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type lines(linesSEXP);
    rcpp_result_gen = Rcpp::wrap(splitHeaderLines(lines));
    return rcpp_result_gen;
END_RCPP
}
// getLogData
DataFrame getLogData(std::vector<std::string> lines, std::vector<std::string> curveNames, double nullVal);
RcppExport SEXP _lasr_getLogData(SEXP linesSEXP, SEXP curveNamesSEXP, SEXP nullValSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type lines(linesSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type curveNames(curveNamesSEXP);
    Rcpp::traits::input_parameter< double >::type nullVal(nullValSEXP);
    rcpp_result_gen = Rcpp::wrap(getLogData(lines, curveNames, nullVal));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lasr_splitHeaderLines", (DL_FUNC) &_lasr_splitHeaderLines, 1},
    {"_lasr_getLogData", (DL_FUNC) &_lasr_getLogData, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_lasr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
